
// окно.On().WmDrawItem(func(p wm.DrawItem) {
// 	drawItem := p.DrawItemStruct()

// 	// Проверяем, что это наш статический элемент
// 	if drawItem.HwndItem.GetDlgCtrlID() == основноеОкнаПрограммы.надпись.Hwnd().GetDlgCtrlID()  {

// 		hdc := drawItem.Hdc

// 		// hdc := hWnd.GetWindowDC()

// 		// Задаем отступы (левый, верхний, правый, нижний)
// 		rect := drawItem.RcItem
// 		rect.Left += 5
// 		rect.Top += 2
// 		rect.Right -= 5
// 		rect.Bottom -= 2

// 		// Получаем текст элемента
// 		text := основноеОкнаПрограммы.надпись.Text()

// 		// Рисуем текст с отступами
// 		// hdc.SetBkMode(co.TRANSPARENT)
// 		hdc.DrawText(text,
// 			&rect,
// 			co.DT_LEFT|co.DT_TOP|co.DT_WORDBREAK,
// 		)
// 	}
// })
// func (сетка *Сетка) Разместить() {
// 	Инфо(" Разместить %+v \n", сетка)

// 	размерыОкна := ОсновноеОкноПрограммы.окно.Hwnd().GetClientRect()
// 	ширинаОкна := размерыОкна.Right - размерыОкна.Left
// 	высотаОкна := размерыОкна.Bottom - размерыОкна.Top

// 	текущаяПоложениеСВерху := сетка.отступ.верхний
// 	Инфо("размерыОкна %v ширинаОкна %v высотаОкна %v текущаяПоложениеСВерху %v \n", размерыОкна, ширинаОкна, высотаОкна, текущаяПоложениеСВерху)

// 	Инфо(" len(сетка.контейнеры) %+v \n", len(сетка.контейнеры))

// 	for номерКОнтейнера, контейнер := range сетка.контейнеры {
// 		Инфо("номерКОнтейнера  %+v контейнер %+v \n", номерКОнтейнера, контейнер)

// 		ширинаЭлемента := (ширинаОкна - контейнер.отступ.левый - контейнер.отступ.правый) / контейнер.столбцы
// 		высотаЭлемента := (высотаОкна - контейнер.отступ.верхний - контейнер.отступ.нижний) / контейнер.строки

// 		Инфо(" 1 высотаЭлемента  %+v ширинаЭлемента %+v \n", высотаЭлемента, ширинаЭлемента)

// 		for i, элемент := range контейнер.элементы {
// 			эл := *элемент
// 			строка := int32(i) / контейнер.столбцы
// 			столбец := int32(i) % контейнер.столбцы

// 			x := контейнер.отступ.левый + столбец*(ширинаЭлемента+контейнер.отступ.правый)
// 			y := текущаяПоложениеСВерху + контейнер.отступ.верхний + строка*(высотаЭлемента+контейнер.отступ.нижний)

// 			// Проверяем, заданы ли размеры у элемента
// 			размерыЭлемента := эл.Hwnd().GetClientRect()
// 			ширинаЭлемента = размерыЭлемента.Right - размерыЭлемента.Left
// 			высотаЭлемента = размерыЭлемента.Bottom - размерыЭлемента.Top

// 			Инфо("2 высотаЭлемента  %+v ширинаЭлемента %+v \n", высотаЭлемента, ширинаЭлемента)

// 			if ширинаЭлемента == 0 || высотаЭлемента == 0 {
// 				ширинаЭлемента = (ширинаОкна - контейнер.отступ.левый - контейнер.отступ.правый) / контейнер.столбцы
// 				высотаЭлемента = (высотаОкна - контейнер.отступ.верхний - контейнер.отступ.нижний) / контейнер.строки
// 			}
// 			Инфо("высотаЭлемента  %+v ширинаЭлемента %+v \n", высотаЭлемента, ширинаЭлемента)
// 			// Применяем распределение, если оно задано
// 			if контейнер.распределение > 0 {
// 				switch контейнер.распределение {
// 				case центр:
// 					x += (ширинаОкна - ширинаЭлемента) / 2
// 					y += (высотаОкна - высотаЭлемента) / 2
// 				case лево:
// 					x = контейнер.отступ.левый
// 				case право:
// 					x = ширинаОкна - ширинаЭлемента - контейнер.отступ.правый
// 				case растянуть:
// 					ширинаЭлемента = ширинаОкна - контейнер.отступ.левый - контейнер.отступ.правый
// 					высотаЭлемента = высотаОкна - контейнер.отступ.верхний - контейнер.отступ.нижний
// 				case пространствоМежду:
// 					// Равномерное распределение с учетом отступов
// 					ширинаЭлемента = (ширинаОкна - контейнер.отступ.левый - контейнер.отступ.правый - (контейнер.столбцы-1)*контейнер.отступ.правый) / контейнер.столбцы
// 					высотаЭлемента = (высотаОкна - контейнер.отступ.верхний - контейнер.отступ.нижний - (контейнер.строки-1)*контейнер.отступ.нижний) / контейнер.строки
// 				case пространствоРавномерно:
// 					// Равномерное распределение с учетом отступов
// 					ширинаЭлемента = (ширинаОкна - контейнер.отступ.левый - контейнер.отступ.правый - (контейнер.столбцы-1)*контейнер.отступ.правый) / контейнер.столбцы
// 					высотаЭлемента = (высотаОкна - контейнер.отступ.верхний - контейнер.отступ.нижний - (контейнер.строки-1)*контейнер.отступ.нижний) / контейнер.строки
// 				case пространствоВокруг:
// 					// Равномерное распределение с учетом отступов
// 					ширинаЭлемента = (ширинаОкна - контейнер.отступ.левый - контейнер.отступ.правый - (контейнер.столбцы-1)*контейнер.отступ.правый) / контейнер.столбцы
// 					высотаЭлемента = (высотаОкна - контейнер.отступ.верхний - контейнер.отступ.нижний - (контейнер.строки-1)*контейнер.отступ.нижний) / контейнер.строки
// 				}
// 			}

// 			// Отладочная информация
// 			Инфо("Элемент %d: x=%d, y=%d, ширинаЭлемента=%d, высотаЭлемента=%d текущаяПоложениеСВерхуОтВерхаОкна=%d  \n", i, x, y, ширинаЭлемента, высотаЭлемента, текущаяПоложениеСВерху)

// 			эл.Hwnd().MoveWindow(x, y, ширинаЭлемента, высотаЭлемента, true)
// 		}

// 		Инфо(" текущаяПоложениеСВерху = контейнер.отступ.верхний(%+v) + онтейнер.отступ.нижний(%+v) + высотаЭлемента(%+v) *   контейнер.строки(%+v) = %+v\n", контейнер.отступ.верхний, контейнер.отступ.нижний, высотаЭлемента, контейнер.строки, текущаяПоложениеСВерху)
// 		текущаяПоложениеСВерху += контейнер.отступ.верхний + контейнер.отступ.нижний + высотаЭлемента*контейнер.строки

// 		Инфо(" текущаяПоложениеСВерху = контейнер.отступ.верхний(%+v) + онтейнер.отступ.нижний(%+v) + высотаЭлемента(%+v) *   контейнер.строки(%+v) = %+v\n", контейнер.отступ.верхний, контейнер.отступ.нижний, высотаЭлемента, контейнер.строки, текущаяПоложениеСВерху)
// 	}
// }

// func (сетка *Сетка) Разместить() {
// 	Инфо(" Разместить %+v \n", сетка)

// 	размерыОкна := ОсновноеОкноПрограммы.окно.Hwnd().GetClientRect()
// 	ширинаОкна := размерыОкна.Right - размерыОкна.Left
// 	высотаОкна := размерыОкна.Bottom - размерыОкна.Top

// 	текущаяПоложениеСВерху := сетка.отступ.верхний
// 	Инфо("размерыОкна %v ширинаОкна %v высотаОкна %v текущаяПоложениеСВерху %v \n", размерыОкна, ширинаОкна, высотаОкна, текущаяПоложениеСВерху)
// 	Инфо(" len(сетка.контейнеры) %+v \n", len(сетка.контейнеры))

// 	for номерКОнтейнера, контейнер := range сетка.контейнеры {
// 		Инфо("номерКОнтейнера  %+v контейнер %+v \n", номерКОнтейнера, контейнер)

// 		ширинаЭлемента := (ширинаОкна - контейнер.отступ.левый - контейнер.отступ.правый) / контейнер.столбцы
// 		высотаЭлемента := (высотаОкна - контейнер.отступ.верхний - контейнер.отступ.нижний) / контейнер.строки

// 		for i, элемент := range контейнер.элементы {
// 			эл := *элемент
// 			строка := int32(i) / контейнер.столбцы
// 			столбец := int32(i) % контейнер.столбцы

// 			x := контейнер.отступ.левый + столбец*(ширинаЭлемента+контейнер.отступ.правый)
// 			y := текущаяПоложениеСВерху + контейнер.отступ.верхний + строка*(высотаЭлемента+контейнер.отступ.нижний)

// 			// Проверяем, заданы ли размеры у элемента
// 			размерыЭлемента := эл.Hwnd().GetClientRect()
// 			ширинаЭлемента := размерыЭлемента.Right - размерыЭлемента.Left
// 			высотаЭлемента := размерыЭлемента.Bottom - размерыЭлемента.Top

// 			if ширинаЭлемента == 0 || высотаЭлемента == 0 {
// 				ширинаЭлемента = (ширинаОкна - контейнер.отступ.левый - контейнер.отступ.правый) / контейнер.столбцы
// 				высотаЭлемента = (высотаОкна - контейнер.отступ.верхний - контейнер.отступ.нижний) / контейнер.строки
// 			}

// 			// Применяем распределение, если оно задано
// 			if контейнер.распределение != 0 {
// 				switch контейнер.распределение {
// 				case центр:
// 					x += (ширинаОкна - ширинаЭлемента) / 2
// 					y += (высотаОкна - высотаЭлемента) / 2
// 				case лево:
// 					x = контейнер.отступ.левый
// 				case право:
// 					x = ширинаОкна - ширинаЭлемента - контейнер.отступ.правый
// 				case растянуть:
// 					ширинаЭлемента = ширинаОкна - контейнер.отступ.левый - контейнер.отступ.правый
// 					высотаЭлемента = высотаОкна - контейнер.отступ.верхний - контейнер.отступ.нижний
// 				case пространствоМежду:
// 					// Равномерное распределение с учетом отступов
// 					ширинаЭлемента = (ширинаОкна - контейнер.отступ.левый - контейнер.отступ.правый - (контейнер.столбцы-1)*контейнер.отступ.правый) / контейнер.столбцы
// 					высотаЭлемента = (высотаОкна - контейнер.отступ.верхний - контейнер.отступ.нижний - (контейнер.строки-1)*контейнер.отступ.нижний) / контейнер.строки
// 				case пространствоРавномерно:
// 					// Равномерное распределение с учетом отступов
// 					ширинаЭлемента = (ширинаОкна - контейнер.отступ.левый - контейнер.отступ.правый - (контейнер.столбцы-1)*контейнер.отступ.правый) / контейнер.столбцы
// 					высотаЭлемента = (высотаОкна - контейнер.отступ.верхний - контейнер.отступ.нижний - (контейнер.строки-1)*контейнер.отступ.нижний) / контейнер.строки
// 				case пространствоВокруг:
// 					// Равномерное распределение с учетом отступов
// 					ширинаЭлемента = (ширинаОкна - контейнер.отступ.левый - контейнер.отступ.правый - (контейнер.столбцы-1)*контейнер.отступ.правый) / контейнер.столбцы
// 					высотаЭлемента = (высотаОкна - контейнер.отступ.верхний - контейнер.отступ.нижний - (контейнер.строки-1)*контейнер.отступ.нижний) / контейнер.строки
// 				}
// 			}

// 			// Отладочная информация
// 			Инфо("Элемент %d: x=%d, y=%d, ширина=%d, высота=%d текущаяПоложениеСВерхуОтВерхаОкна \n", i, x, y, ширинаЭлемента, высотаЭлемента, текущаяПоложениеСВерху)

// 			эл.Hwnd().MoveWindow(x, y, ширинаЭлемента, высотаЭлемента, true)
// 		}

// 		текущаяПоложениеСВерху += контейнер.отступ.верхний + контейнер.отступ.нижний + высотаЭлемента*контейнер.строки
// 	}
// }

// func (сетка *Сетка) Разместить() {
// 	// ширинаОкна := ОсновноеОкноПрограммы.окно.Hwnd().GetDC().GetViewportExtEx().Cx
// 	// высотаОкна := ОсновноеОкноПрограммы.окно.Hwnd().GetDC().GetViewportExtEx().Cy

// 	размерыОкна := ОсновноеОкноПрограммы.окно.Hwnd().GetClientRect()
// 	ширинаОкна := размерыОкна.Right - размерыОкна.Left
// 	высотаОкна := размерыОкна.Bottom - размерыОкна.Top
// 	// высотаОкна := ОсновноеОкноПрограммы.окно.Hwnd().GetDC().GetViewportExtEx().Cy
// 	// ширинаЭлемента := ширинаОкна / сетка.столбцы
// 	// высотаЭлемента := высотаОкна / сетка.строки

// 	// ширинаЭлемента := (ширинаОкна - сетка.отступ.левый - сетка.отступ.правый) / сетка.столбцы
// 	// высотаЭлемента := (высотаОкна - сетка.отступ.верхний - сетка.отступ.нижний) / сетка.строки
// 	текущаяПоложениеСВерху := сетка.отступ.верхний

// 	// fmt.Printf("ширинаОкна Bottom %d  Left %d  Right %d Top %d\n", ширинаОкна.Bottom, ширинаОкна.Left, ширинаОкна.Right, ширинаОкна.Top)
// 	// fmt.Printf("ширинаЭлемента: %d, высотаЭлемента: %d, ширинаОкна: %d, высотаОкна: %d\n", ширинаЭлемента, высотаЭлемента, ширинаОкна, высотаОкна)
// 	for _, контейнер := range сетка.контейнеры {
// 		ширинаЭлемента := (ширинаОкна - контейнер.отступ.левый - контейнер.отступ.правый) / контейнер.столбцы
// 		высотаЭлемента := (высотаОкна - контейнер.отступ.верхний - контейнер.отступ.нижний) / контейнер.строки

// 		for i, элемент := range контейнер.элементы {
// 			эл := *элемент
// 			строка := int32(i) / контейнер.столбцы
// 			столбец := int32(i) % контейнер.столбцы

// 			x := контейнер.отступ.левый + столбец*(ширинаЭлемента+контейнер.отступ.правый)
// 			y := текущаяПоложениеСВерху + контейнер.отступ.верхний + строка*(высотаЭлемента+контейнер.отступ.нижний)

// 			// Проверяем, заданы ли размеры у элемента
// 			размерыЭлемента := эл.Hwnd().GetClientRect()
// 			ширинаЭлемента := размерыЭлемента.Right - размерыЭлемента.Left
// 			высотаЭлемента := размерыЭлемента.Bottom - размерыЭлемента.Top

// 			if ширинаЭлемента == 0 || высотаЭлемента == 0 {
// 				ширинаЭлемента = (ширинаОкна - контейнер.отступ.левый - контейнер.отступ.правый) / контейнер.столбцы
// 				высотаЭлемента = (высотаОкна - контейнер.отступ.верхний - контейнер.отступ.нижний) / контейнер.строки
// 			}

// 			// Применяем распределение, если оно задано
// 			if контейнер.распределение != 0 {
// 				switch контейнер.распределение {
// 				case центр:
// 					x += (ширинаОкна - ширинаЭлемента) / 2
// 					y += (высотаОкна - высотаЭлемента) / 2
// 				case лево:
// 					x = контейнер.отступ.левый
// 				case право:
// 					x = ширинаОкна - ширинаЭлемента - контейнер.отступ.правый
// 				case растянуть:
// 					ширинаЭлемента = ширинаОкна - контейнер.отступ.левый - контейнер.отступ.правый
// 					высотаЭлемента = высотаОкна - контейнер.отступ.верхний - контейнер.отступ.нижний
// 				case пространствоМежду:
// 					// Равномерное распределение с учетом отступов
// 					ширинаЭлемента = (ширинаОкна - контейнер.отступ.левый - контейнер.отступ.правый - (контейнер.столбцы-1)*контейнер.отступ.правый) / контейнер.столбцы
// 					высотаЭлемента = (высотаОкна - контейнер.отступ.верхний - контейнер.отступ.нижний - (контейнер.строки-1)*контейнер.отступ.нижний) / контейнер.строки
// 				case пространствоРавномерно:
// 					// Равномерное распределение с учетом отступов
// 					ширинаЭлемента = (ширинаОкна - контейнер.отступ.левый - контейнер.отступ.правый - (контейнер.столбцы-1)*контейнер.отступ.правый) / контейнер.столбцы
// 					высотаЭлемента = (высотаОкна - контейнер.отступ.верхний - контейнер.отступ.нижний - (контейнер.строки-1)*контейнер.отступ.нижний) / контейнер.строки
// 				case пространствоВокруг:
// 					// Равномерное распределение с учетом отступов
// 					ширинаЭлемента = (ширинаОкна - контейнер.отступ.левый - контейнер.отступ.правый - (контейнер.столбцы-1)*контейнер.отступ.правый) / контейнер.столбцы
// 					высотаЭлемента = (высотаОкна - контейнер.отступ.верхний - контейнер.отступ.нижний - (контейнер.строки-1)*контейнер.отступ.нижний) / контейнер.строки
// 				}
// 			}

// 			эл.Hwnd().MoveWindow(x, y, ширинаЭлемента, высотаЭлемента, true)

// 			// эл := *элемент
// 			// строка := int32(i) / контейнер.столбцы
// 			// столбец := int32(i) % контейнер.столбцы
// 			// // размерыЭлемента := эл.Hwnd().GetClientRect()
// 			// // ширинаЭлемента := размерыЭлемента.Right - размерыЭлемента.Left
// 			// // высотаЭлемента := размерыЭлемента.Bottom - размерыЭлемента.Top

// 			// x := контейнер.отступ.левый + столбец*(ширинаЭлемента+контейнер.отступ.правый)
// 			// y := текущаяПоложениеСВерху + контейнер.отступ.верхний + строка*(высотаЭлемента+контейнер.отступ.нижний)

// 			// эл.Hwnd().MoveWindow(x, y, ширинаЭлемента, высотаЭлемента, true)
// 		}

// 		текущаяПоложениеСВерху += контейнер.отступ.верхний + контейнер.отступ.нижний + высотаЭлемента*контейнер.строки
// 	}
// 	// for i, контейнер := range сетка.контейнеры {

// 	// 	к := *контейнер
// 	// 	строка := int32(i) / сетка.столбцы
// 	// 	столбец := int32(i) % сетка.столбцы
// 	// 	// x := столбец * ширинаЭлемента
// 	// 	// y := строка * высотаЭлемента
// 	// 	x := сетка.отступ.левый + столбец*(ширинаЭлемента+сетка.отступ.правый)
// 	// 	y := сетка.отступ.верхний + строка*(высотаЭлемента+сетка.отступ.нижний)
// 	// 	// элемент.Position(win.POINT{X: x, Y: y})
// 	// 	// элемент.SetSize(win.SIZE{Cx: ширинаЭлемента, Cy: высотаЭлемента})
// 	// 	// fmt.Printf("строка  %d, столбец  %d, \n", строка, столбец)
// 	// 	// fmt.Printf("x: %d, y: %d, ширинаЭлемента: %d, высотаЭлемента: %d\n", x, y, ширинаЭлемента, высотаЭлемента)
// 	// 	эл.Hwnd().MoveWindow(x, y, ширинаЭлемента, высотаЭлемента, true)

// 	// }
// }
